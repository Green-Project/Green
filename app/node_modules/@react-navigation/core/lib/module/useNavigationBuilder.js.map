{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["React","isValidElementType","CommonActions","NavigationStateContext","NavigationRouteContext","Screen","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildListeners","useFocusedListenersChildrenAdapter","useKeyedChildListeners","useOnGetState","useScheduleUpdate","useCurrentRender","isArrayEqual","PrivateValueStore","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","getIsInitial","initializedState","isFirstStateInitialization","useMemo","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","reset","navigate","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","index","Object","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n  Route,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildListeners from './useChildListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOnGetState from './useOnGetState';\nimport useScheduleUpdate from './useScheduleUpdate';\nimport useCurrentRender from './useCurrentRender';\nimport isArrayEqual from './isArrayEqual';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n} from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<\n      string,\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n    >\n  >((acc, config) => {\n    if (config.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\n      );\n    }\n\n    acc[config.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params.state !== previousParams?.state\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // FIXME: Since params are merged, `route.params.params` might contain params from an older route\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate(route.params.screen, route.params.params);\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        ...routeNames.map((name) => {\n          const { listeners } = screens[name];\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}