{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","getRouteConfigsFromChildren","children","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","push","props","Fragment","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","NavigationRouteContext","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","getIsInitial","NavigationStateContext","initializedState","isFirstStateInitialization","useMemo","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","CommonActions","reset","navigate","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","index","Object","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n  Route,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildListeners from './useChildListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOnGetState from './useOnGetState';\nimport useScheduleUpdate from './useScheduleUpdate';\nimport useCurrentRender from './useCurrentRender';\nimport isArrayEqual from './isArrayEqual';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n} from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<\n      string,\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n    >\n  >((acc, config) => {\n    if (config.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\n      );\n    }\n\n    acc[config.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params.state !== previousParams?.state\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // FIXME: Since params are merged, `route.params.params` might contain params from an older route\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate(route.params.screen, route.params.params);\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        ...routeNames.map((name) => {\n          const { listeners } = screens[name];\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}